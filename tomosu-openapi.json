{
  "openapi": "3.1.0",
  "info": {
    "title": "TOMOSU Backend API",
    "description": "\n    ## 地域SNSアプリ TOMOSU のバックエンドAPI (MVP版)\n\n    TOMOSU（地域SNSアプリ）のMVPバックエンドAPIシステム。地域住民の情報交換体験を検証するための最小限の機能を提供し、\n    Azure Container Apps環境でのパフォーマンス最適化を重視した設計。\n\n    ### 主な機能\n    - **高速キャッシュベース**: 全データをメモリキャッシュで管理し、95%のリクエストを200ms以内で応答\n    - **簡略化認証**: MVP用の固定ユーザー認証システム\n    - **投稿管理**: 地域投稿の閲覧・作成・タグ検索\n    - **ユーザー関係**: プロフィール・フォロー関係の表示\n    - **アンケート機能**: 地域アンケートの閲覧・回答結果表示\n\n    ### パフォーマンス目標\n    - 95%のリクエストが200ms以内で応答\n    - システム起動時5秒以内でキャッシュ初期化完了\n    - 100並行ユーザーをサポート\n\n    ### エラーコード\n    - **401**: 認証が必要\n    - **403**: アクセス権限なし\n    - **404**: リソースが見つからない\n    - **422**: リクエストデータの検証エラー\n    - **503**: サービス利用不可（キャッシュ未初期化等）\n\n    ### 認証について\n    MVP版では簡略化された認証を使用。セッションクッキーによる認証で、\n    `/api/v1/auth/login` でログイン後、保護されたエンドポイントにアクセス可能。\n    ",
    "contact": {
      "name": "TOMOSU Development Team",
      "email": "dev@tomosu.example.com"
    },
    "license": {
      "name": "MIT License",
      "url": "https://opensource.org/licenses/MIT"
    },
    "version": "1.0.0"
  },
  "servers": [
    {
      "url": "http://localhost:8000",
      "description": "Development server"
    },
    {
      "url": "https://tomosu-api.azurewebsites.net",
      "description": "Production server"
    }
  ],
  "paths": {
    "/api/v1/auth/default-credentials": {
      "get": {
        "tags": [
          "authentication"
        ],
        "summary": "Get Default Credentials",
        "description": "Get default credentials for MVP login (requirement 1.1)\nReturns pre-filled credentials for the login form",
        "operationId": "get_default_credentials_api_v1_auth_default_credentials_get",
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/DefaultCredentialsResponse"
                }
              }
            }
          }
        }
      }
    },
    "/api/v1/auth/login": {
      "post": {
        "tags": [
          "authentication"
        ],
        "summary": "Login",
        "description": "Login endpoint for MVP (requirement 1.2)\nAccepts any credentials and always logs in as the fixed user",
        "operationId": "login_api_v1_auth_login_post",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/LoginRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/LoginResponse"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/api/v1/auth/logout": {
      "post": {
        "tags": [
          "authentication"
        ],
        "summary": "Logout",
        "description": "Logout endpoint (requirement 1.5)\nRemoves session cookie and invalidates session",
        "operationId": "logout_api_v1_auth_logout_post",
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {}
              }
            }
          }
        }
      }
    },
    "/api/v1/auth/me": {
      "get": {
        "tags": [
          "authentication"
        ],
        "summary": "Get Current User Info",
        "description": "Get current user information (requirement 1.4)\nReturns the fixed user profile for authenticated sessions",
        "operationId": "get_current_user_info_api_v1_auth_me_get",
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UserResponse"
                }
              }
            }
          }
        }
      }
    },
    "/api/v1/auth/session-status": {
      "get": {
        "tags": [
          "authentication"
        ],
        "summary": "Get Session Status",
        "description": "Check session status for debugging and monitoring",
        "operationId": "get_session_status_api_v1_auth_session_status_get",
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {}
              }
            }
          }
        }
      }
    },
    "/api/v1/auth/stats": {
      "get": {
        "tags": [
          "authentication"
        ],
        "summary": "Get Auth Stats",
        "description": "Get authentication statistics for monitoring",
        "operationId": "get_auth_stats_api_v1_auth_stats_get",
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {}
              }
            }
          }
        }
      }
    },
    "/api/v1/posts/timeline": {
      "get": {
        "tags": [
          "posts"
        ],
        "summary": "タイムライン投稿一覧を取得",
        "description": "UI表示に最適化された投稿一覧を取得します。作成日時の新しい順でソートされます。",
        "operationId": "get_timeline_api_v1_posts_timeline_get",
        "parameters": [
          {
            "name": "skip",
            "in": "query",
            "required": false,
            "schema": {
              "type": "integer",
              "minimum": 0,
              "description": "スキップする投稿数",
              "default": 0,
              "title": "Skip"
            },
            "description": "スキップする投稿数"
          },
          {
            "name": "limit",
            "in": "query",
            "required": false,
            "schema": {
              "type": "integer",
              "maximum": 100,
              "minimum": 1,
              "description": "取得する最大投稿数",
              "default": 20,
              "title": "Limit"
            },
            "description": "取得する最大投稿数"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/PostResponse"
                  },
                  "title": "Response Get Timeline Api V1 Posts Timeline Get"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/api/v1/posts": {
      "get": {
        "tags": [
          "posts"
        ],
        "summary": "投稿一覧を取得",
        "description": "地域投稿の一覧をページネーション付きで取得します。\n    \n    **機能詳細:**\n    - キャッシュから高速取得（200ms以内の応答目標）\n    - 投稿は作成日時の新しい順でソート\n    - 各投稿にはいいね数、コメント数、タグ情報を含む\n    - 認証済みユーザーの場合、is_liked/is_bookmarkedフラグを設定\n    \n    **パフォーマンス:**\n    - 95%のリクエストが200ms以内で応答\n    - メモリキャッシュから直接取得",
        "operationId": "get_posts_api_v1_posts_get",
        "parameters": [
          {
            "name": "skip",
            "in": "query",
            "required": false,
            "schema": {
              "type": "integer",
              "maximum": 10000,
              "minimum": 0,
              "description": "スキップする投稿数（ページネーション用）",
              "default": 0,
              "title": "Skip"
            },
            "description": "スキップする投稿数（ページネーション用）",
            "example": 0
          },
          {
            "name": "limit",
            "in": "query",
            "required": false,
            "schema": {
              "type": "integer",
              "maximum": 100,
              "minimum": 1,
              "description": "取得する最大投稿数（パフォーマンス最適化済み）",
              "default": 20,
              "title": "Limit"
            },
            "description": "取得する最大投稿数（パフォーマンス最適化済み）",
            "example": 20
          }
        ],
        "responses": {
          "200": {
            "description": "投稿一覧の取得成功",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/PostResponse"
                  },
                  "title": "Response Get Posts Api V1 Posts Get"
                },
                "example": [
                  {
                    "post_id": 1,
                    "user_id": 1,
                    "content": "地域のお祭り情報です！今年も盛大に開催予定です。",
                    "created_at": "2024-01-15T10:30:00Z",
                    "updated_at": "2024-01-15T10:30:00Z",
                    "author": {
                      "user_id": 1,
                      "username": "tanaka_taro",
                      "display_name": "田中太郎",
                      "profile_image_url": "https://example.com/avatar1.jpg",
                      "bio": "地域イベント大好きです",
                      "area": "東京都渋谷区",
                      "created_at": "2024-01-01T00:00:00Z"
                    },
                    "tags": [
                      {
                        "tag_id": 1,
                        "tag_name": "イベント",
                        "posts_count": 25
                      },
                      {
                        "tag_id": 2,
                        "tag_name": "お祭り",
                        "posts_count": 12
                      }
                    ],
                    "likes_count": 15,
                    "comments_count": 3,
                    "is_liked": false,
                    "is_bookmarked": true
                  }
                ]
              }
            }
          },
          "503": {
            "description": "サービス利用不可（キャッシュ未初期化）",
            "content": {
              "application/json": {
                "example": {
                  "error_code": "SERVICE_UNAVAILABLE",
                  "message": "Service temporarily unavailable - cache not initialized",
                  "timestamp": "2024-01-15T10:30:00Z"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      },
      "post": {
        "tags": [
          "posts"
        ],
        "summary": "新規投稿を作成",
        "description": "新しい投稿を作成します（MVP版：キャッシュのみ）。\n    \n    **機能詳細:**\n    - 投稿はキャッシュに追加されますが、データベースには保存されません\n    - タグの自動関連付け\n    - 認証が必要\n    - 投稿内容の検証\n    \n    **制限事項:**\n    - MVP版のため、投稿はアプリケーション再起動時に失われます\n    - 最大文字数制限あり",
        "operationId": "create_post_api_v1_posts_post",
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/PostRequest"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "投稿作成成功",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PostResponse"
                },
                "example": {
                  "post_id": 101,
                  "user_id": 1,
                  "content": "新しい地域イベントの提案です！",
                  "created_at": "2024-01-15T10:30:00Z",
                  "updated_at": "2024-01-15T10:30:00Z",
                  "author": {
                    "user_id": 1,
                    "username": "tanaka_taro",
                    "display_name": "田中太郎"
                  },
                  "tags": [
                    {
                      "tag_id": 1,
                      "tag_name": "イベント",
                      "posts_count": 26
                    }
                  ],
                  "likes_count": 0,
                  "comments_count": 0,
                  "is_liked": false,
                  "is_bookmarked": false
                }
              }
            }
          },
          "401": {
            "description": "認証が必要",
            "content": {
              "application/json": {
                "example": {
                  "error_code": "AUTHENTICATION_REQUIRED",
                  "message": "Authentication required",
                  "timestamp": "2024-01-15T10:30:00Z"
                }
              }
            }
          },
          "422": {
            "description": "リクエストデータの検証エラー",
            "content": {
              "application/json": {
                "example": {
                  "error_code": "VALIDATION_ERROR",
                  "message": "Request validation failed",
                  "field_errors": {
                    "content": "Content is required"
                  },
                  "timestamp": "2024-01-15T10:30:00Z"
                }
              }
            }
          }
        }
      }
    },
    "/api/v1/posts/{post_id}": {
      "get": {
        "tags": [
          "posts"
        ],
        "summary": "投稿詳細を取得",
        "description": "指定されたIDの投稿詳細を取得します。\n    \n    **機能詳細:**\n    - キャッシュから高速取得\n    - 投稿者情報、タグ、いいね数、コメント数を含む\n    - 認証済みユーザーの場合、個人的な状態（いいね済み、ブックマーク済み）を表示",
        "operationId": "get_post_by_id_api_v1_posts__post_id__get",
        "parameters": [
          {
            "name": "post_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "description": "取得する投稿のID",
              "title": "Post Id"
            },
            "description": "取得する投稿のID",
            "example": 1
          }
        ],
        "responses": {
          "200": {
            "description": "投稿詳細の取得成功",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PostResponse"
                },
                "example": {
                  "post_id": 1,
                  "user_id": 1,
                  "content": "地域のお祭り情報です！今年も盛大に開催予定です。",
                  "created_at": "2024-01-15T10:30:00Z",
                  "updated_at": "2024-01-15T10:30:00Z",
                  "author": {
                    "user_id": 1,
                    "username": "tanaka_taro",
                    "display_name": "田中太郎"
                  },
                  "tags": [
                    {
                      "tag_id": 1,
                      "tag_name": "イベント",
                      "posts_count": 25
                    }
                  ],
                  "likes_count": 15,
                  "comments_count": 3,
                  "is_liked": false,
                  "is_bookmarked": true
                }
              }
            }
          },
          "404": {
            "description": "投稿が見つからない",
            "content": {
              "application/json": {
                "example": {
                  "error_code": "RESOURCE_NOT_FOUND",
                  "message": "Post not found",
                  "resource_type": "Post",
                  "resource_id": "999",
                  "timestamp": "2024-01-15T10:30:00Z"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/api/v1/posts/tags/{tag_name}": {
      "get": {
        "tags": [
          "posts"
        ],
        "summary": "Get Posts By Tag",
        "description": "Get posts filtered by tag name with pagination (requirement 2.3, 6.4)\nReturns posts with the specified tag sorted by creation date (newest first)",
        "operationId": "get_posts_by_tag_api_v1_posts_tags__tag_name__get",
        "parameters": [
          {
            "name": "tag_name",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "title": "Tag Name"
            }
          },
          {
            "name": "skip",
            "in": "query",
            "required": false,
            "schema": {
              "type": "integer",
              "maximum": 10000,
              "minimum": 0,
              "description": "Number of posts to skip for pagination",
              "default": 0,
              "title": "Skip"
            },
            "description": "Number of posts to skip for pagination"
          },
          {
            "name": "limit",
            "in": "query",
            "required": false,
            "schema": {
              "type": "integer",
              "maximum": 100,
              "minimum": 1,
              "description": "Maximum number of posts to return (optimized for performance)",
              "default": 20,
              "title": "Limit"
            },
            "description": "Maximum number of posts to return (optimized for performance)"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/PostResponse"
                  },
                  "title": "Response Get Posts By Tag Api V1 Posts Tags  Tag Name  Get"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/api/v1/posts/{post_id}/comments": {
      "get": {
        "tags": [
          "posts"
        ],
        "summary": "Get Post Comments",
        "description": "Get comments for a specific post with pagination (requirement 3.1, 3.2, 3.3)\nReturns comments sorted chronologically (oldest first)",
        "operationId": "get_post_comments_api_v1_posts__post_id__comments_get",
        "parameters": [
          {
            "name": "post_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "title": "Post Id"
            }
          },
          {
            "name": "skip",
            "in": "query",
            "required": false,
            "schema": {
              "type": "integer",
              "maximum": 10000,
              "minimum": 0,
              "description": "Number of comments to skip for pagination",
              "default": 0,
              "title": "Skip"
            },
            "description": "Number of comments to skip for pagination"
          },
          {
            "name": "limit",
            "in": "query",
            "required": false,
            "schema": {
              "type": "integer",
              "maximum": 100,
              "minimum": 1,
              "description": "Maximum number of comments to return (optimized for performance)",
              "default": 50,
              "title": "Limit"
            },
            "description": "Maximum number of comments to return (optimized for performance)"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/CommentResponse"
                  },
                  "title": "Response Get Post Comments Api V1 Posts  Post Id  Comments Get"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/api/v1/posts/{post_id}/likes": {
      "get": {
        "tags": [
          "likes",
          "bookmarks"
        ],
        "summary": "Get Post Likes",
        "description": "Get like information for a specific post (requirement 4.1)\nReturns like count and whether current user has liked the post",
        "operationId": "get_post_likes_api_v1_posts__post_id__likes_get",
        "parameters": [
          {
            "name": "post_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "title": "Post Id"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "additionalProperties": true,
                  "title": "Response Get Post Likes Api V1 Posts  Post Id  Likes Get"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/api/v1/users/{user_id}/bookmarks": {
      "get": {
        "tags": [
          "likes",
          "bookmarks"
        ],
        "summary": "Get User Bookmarks",
        "description": "Get posts bookmarked by a specific user (requirement 4.2, 4.3)\nReturns bookmarked posts sorted by creation date (newest first)",
        "operationId": "get_user_bookmarks_api_v1_users__user_id__bookmarks_get",
        "parameters": [
          {
            "name": "user_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "title": "User Id"
            }
          },
          {
            "name": "skip",
            "in": "query",
            "required": false,
            "schema": {
              "type": "integer",
              "maximum": 10000,
              "minimum": 0,
              "description": "Number of bookmarks to skip for pagination",
              "default": 0,
              "title": "Skip"
            },
            "description": "Number of bookmarks to skip for pagination"
          },
          {
            "name": "limit",
            "in": "query",
            "required": false,
            "schema": {
              "type": "integer",
              "maximum": 100,
              "minimum": 1,
              "description": "Maximum number of bookmarks to return (optimized for performance)",
              "default": 20,
              "title": "Limit"
            },
            "description": "Maximum number of bookmarks to return (optimized for performance)"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/PostResponse"
                  },
                  "title": "Response Get User Bookmarks Api V1 Users  User Id  Bookmarks Get"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/api/v1/users/{user_id}": {
      "get": {
        "tags": [
          "users"
        ],
        "summary": "Get User Profile",
        "description": "Get user profile with relationship counts (requirement 5.1)\nReturns user profile information including followers/following counts",
        "operationId": "get_user_profile_api_v1_users__user_id__get",
        "parameters": [
          {
            "name": "user_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "title": "User Id"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UserProfileResponse"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/api/v1/users/{user_id}/followers": {
      "get": {
        "tags": [
          "users"
        ],
        "summary": "Get User Followers",
        "description": "Get users who follow the specified user (requirement 5.2)\nReturns list of users who are following the specified user",
        "operationId": "get_user_followers_api_v1_users__user_id__followers_get",
        "parameters": [
          {
            "name": "user_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "title": "User Id"
            }
          },
          {
            "name": "skip",
            "in": "query",
            "required": false,
            "schema": {
              "type": "integer",
              "maximum": 10000,
              "minimum": 0,
              "description": "Number of followers to skip for pagination",
              "default": 0,
              "title": "Skip"
            },
            "description": "Number of followers to skip for pagination"
          },
          {
            "name": "limit",
            "in": "query",
            "required": false,
            "schema": {
              "type": "integer",
              "maximum": 100,
              "minimum": 1,
              "description": "Maximum number of followers to return (optimized for performance)",
              "default": 20,
              "title": "Limit"
            },
            "description": "Maximum number of followers to return (optimized for performance)"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/UserResponse"
                  },
                  "title": "Response Get User Followers Api V1 Users  User Id  Followers Get"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/api/v1/users/{user_id}/following": {
      "get": {
        "tags": [
          "users"
        ],
        "summary": "Get User Following",
        "description": "Get users that the specified user is following (requirement 5.3)\nReturns list of users that the specified user is following",
        "operationId": "get_user_following_api_v1_users__user_id__following_get",
        "parameters": [
          {
            "name": "user_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "title": "User Id"
            }
          },
          {
            "name": "skip",
            "in": "query",
            "required": false,
            "schema": {
              "type": "integer",
              "maximum": 10000,
              "minimum": 0,
              "description": "Number of following to skip for pagination",
              "default": 0,
              "title": "Skip"
            },
            "description": "Number of following to skip for pagination"
          },
          {
            "name": "limit",
            "in": "query",
            "required": false,
            "schema": {
              "type": "integer",
              "maximum": 100,
              "minimum": 1,
              "description": "Maximum number of following to return (optimized for performance)",
              "default": 20,
              "title": "Limit"
            },
            "description": "Maximum number of following to return (optimized for performance)"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/UserResponse"
                  },
                  "title": "Response Get User Following Api V1 Users  User Id  Following Get"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/api/v1/tags": {
      "get": {
        "tags": [
          "tags"
        ],
        "summary": "Get Tags",
        "description": "Get all available tags with post counts (requirement 6.1, 6.2)\nReturns tags sorted by tag name alphabetically",
        "operationId": "get_tags_api_v1_tags_get",
        "parameters": [
          {
            "name": "skip",
            "in": "query",
            "required": false,
            "schema": {
              "type": "integer",
              "maximum": 10000,
              "minimum": 0,
              "description": "Number of tags to skip for pagination",
              "default": 0,
              "title": "Skip"
            },
            "description": "Number of tags to skip for pagination"
          },
          {
            "name": "limit",
            "in": "query",
            "required": false,
            "schema": {
              "type": "integer",
              "maximum": 500,
              "minimum": 1,
              "description": "Maximum number of tags to return (optimized for performance)",
              "default": 100,
              "title": "Limit"
            },
            "description": "Maximum number of tags to return (optimized for performance)"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/TagResponse"
                  },
                  "title": "Response Get Tags Api V1 Tags Get"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/api/v1/tags/{tag_name}": {
      "get": {
        "tags": [
          "tags"
        ],
        "summary": "Get Tag By Name",
        "description": "Get a specific tag by name with post count (requirement 6.2, 6.3)",
        "operationId": "get_tag_by_name_api_v1_tags__tag_name__get",
        "parameters": [
          {
            "name": "tag_name",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "title": "Tag Name"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/TagResponse"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/api/v1/surveys": {
      "get": {
        "tags": [
          "surveys"
        ],
        "summary": "Get Surveys",
        "description": "Get all available surveys with response counts (requirement 7.1, 7.2)\nReturns surveys sorted by creation date (newest first)",
        "operationId": "get_surveys_api_v1_surveys_get",
        "parameters": [
          {
            "name": "skip",
            "in": "query",
            "required": false,
            "schema": {
              "type": "integer",
              "maximum": 10000,
              "minimum": 0,
              "description": "Number of surveys to skip for pagination",
              "default": 0,
              "title": "Skip"
            },
            "description": "Number of surveys to skip for pagination"
          },
          {
            "name": "limit",
            "in": "query",
            "required": false,
            "schema": {
              "type": "integer",
              "maximum": 500,
              "minimum": 1,
              "description": "Maximum number of surveys to return (optimized for performance)",
              "default": 100,
              "title": "Limit"
            },
            "description": "Maximum number of surveys to return (optimized for performance)"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/SurveyResponse"
                  },
                  "title": "Response Get Surveys Api V1 Surveys Get"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/api/v1/surveys/{survey_id}": {
      "get": {
        "tags": [
          "surveys"
        ],
        "summary": "Get Survey By Id",
        "description": "Get a specific survey by ID with response count (requirement 7.1, 7.2)",
        "operationId": "get_survey_by_id_api_v1_surveys__survey_id__get",
        "parameters": [
          {
            "name": "survey_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "title": "Survey Id"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SurveyResponse"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/api/v1/surveys/{survey_id}/responses": {
      "get": {
        "tags": [
          "surveys"
        ],
        "summary": "Get Survey Responses",
        "description": "Get aggregated response statistics for a specific survey (requirement 7.3)\nReturns response counts and statistics grouped by choice",
        "operationId": "get_survey_responses_api_v1_surveys__survey_id__responses_get",
        "parameters": [
          {
            "name": "survey_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "title": "Survey Id"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "additionalProperties": true,
                  "title": "Response Get Survey Responses Api V1 Surveys  Survey Id  Responses Get"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/": {
      "get": {
        "tags": [
          "health"
        ],
        "summary": "基本ヘルスチェック",
        "description": "APIサービスの基本的な健全性をチェックします。\n    \n    **用途:**\n    - サービスが起動しているかの確認\n    - キャッシュの初期化状態の確認\n    - 基本的な動作確認\n    \n    **レスポンス時間:** 通常50ms以内",
        "operationId": "root__get",
        "responses": {
          "200": {
            "description": "サービス正常",
            "content": {
              "application/json": {
                "schema": {},
                "example": {
                  "message": "TOMOSU Backend API is running",
                  "version": "1.0.0",
                  "status": "healthy",
                  "cache_status": "initialized",
                  "timestamp": "2024-01-15T10:30:00Z"
                }
              }
            }
          },
          "503": {
            "description": "サービス利用不可",
            "content": {
              "application/json": {
                "example": {
                  "error_code": "SERVICE_UNAVAILABLE",
                  "message": "Service not ready - cache not initialized",
                  "service": "Cache",
                  "timestamp": "2024-01-15T10:30:00Z"
                }
              }
            }
          }
        }
      }
    },
    "/api/v1/system/live": {
      "get": {
        "tags": [
          "health"
        ],
        "summary": "Liveness Probe（生存確認）",
        "description": "アプリケーションプロセスが正常に応答しているかを確認するための、超軽量なエンドポイントです。\n    外部サービスへの依存はなく、常に高速に応答を返します。\n    ACAのLiveness Probe（生存確認）での使用を想定しています。",
        "operationId": "liveness_check_api_v1_system_live_get",
        "responses": {
          "200": {
            "description": "サービスは生存しています",
            "content": {
              "application/json": {
                "schema": {},
                "example": {
                  "status": "alive"
                }
              }
            }
          }
        }
      }
    },
    "/api/v1/system/health": {
      "get": {
        "tags": [
          "system"
        ],
        "summary": "詳細ヘルスチェック",
        "description": "システムの詳細な健全性をチェックします。\n    \n    **監視項目:**\n    - キャッシュの初期化状態\n    - データベース接続状態\n    - 各コンポーネントの状態\n    \n    **用途:**\n    - 監視システムでの定期チェック\n    - ロードバランサーのヘルスチェック\n    - デプロイ後の動作確認",
        "operationId": "detailed_health_check_api_v1_system_health_get",
        "responses": {
          "200": {
            "description": "システム正常",
            "content": {
              "application/json": {
                "schema": {},
                "example": {
                  "status": "healthy",
                  "timestamp": "2024-01-15T10:30:00Z",
                  "version": "1.0.0",
                  "components": {
                    "cache": {
                      "status": "healthy",
                      "initialized": true
                    },
                    "database": {
                      "status": "healthy"
                    }
                  }
                }
              }
            }
          },
          "503": {
            "description": "システム異常",
            "content": {
              "application/json": {
                "example": {
                  "status": "unhealthy",
                  "timestamp": "2024-01-15T10:30:00Z",
                  "version": "1.0.0",
                  "components": {
                    "cache": {
                      "status": "unhealthy",
                      "initialized": false
                    },
                    "database": {
                      "status": "unhealthy",
                      "error": "Connection timeout"
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/api/v1/system/metrics": {
      "get": {
        "tags": [
          "system"
        ],
        "summary": "システムメトリクス取得",
        "description": "システムのパフォーマンスメトリクスと統計情報を取得します。\n    \n    **提供情報:**\n    - キャッシュ統計（データ件数、メモリ使用量）\n    - パフォーマンス統計（応答時間、成功率）\n    - システム稼働時間\n    \n    **用途:**\n    - パフォーマンス監視\n    - キャパシティプランニング\n    - SLA監視（95%のリクエストが200ms以内）",
        "operationId": "get_system_metrics_api_v1_system_metrics_get",
        "responses": {
          "200": {
            "description": "メトリクス取得成功",
            "content": {
              "application/json": {
                "schema": {},
                "example": {
                  "timestamp": "2024-01-15T10:30:00Z",
                  "cache": {
                    "status": "initialized",
                    "initialization_time_seconds": 2.5,
                    "data_counts": {
                      "posts": 100,
                      "users": 50,
                      "comments": 200,
                      "tags": 20,
                      "surveys": 5,
                      "likes": 500,
                      "bookmarks": 150,
                      "follows": 300
                    },
                    "memory_usage": {
                      "total_mb": 128.5,
                      "total_bytes": 134742016
                    }
                  },
                  "performance": {
                    "total_requests": 1000,
                    "average_response_time_ms": 150.5,
                    "requests_under_200ms": 950,
                    "performance_target_percentage": 95,
                    "meets_200ms_target": true
                  },
                  "system": {
                    "status": "operational",
                    "uptime": {
                      "hours": 1,
                      "days": 0.04
                    },
                    "version": "1.0.0"
                  }
                }
              }
            }
          },
          "503": {
            "description": "メトリクス取得不可",
            "content": {
              "application/json": {
                "example": {
                  "error_code": "SERVICE_UNAVAILABLE",
                  "message": "Metrics unavailable - cache not initialized",
                  "service": "Cache",
                  "timestamp": "2024-01-15T10:30:00Z"
                }
              }
            }
          }
        }
      }
    }
  },
  "components": {
    "schemas": {
      "CommentResponse": {
        "properties": {
          "comment_id": {
            "type": "integer",
            "exclusiveMinimum": 0,
            "title": "Comment Id",
            "description": "Unique comment identifier"
          },
          "post_id": {
            "type": "integer",
            "exclusiveMinimum": 0,
            "title": "Post Id",
            "description": "Associated post identifier"
          },
          "user_id": {
            "type": "integer",
            "exclusiveMinimum": 0,
            "title": "User Id",
            "description": "Comment author user identifier"
          },
          "content": {
            "type": "string",
            "maxLength": 1000,
            "minLength": 1,
            "title": "Content",
            "description": "Comment content"
          },
          "created_at": {
            "type": "string",
            "title": "Created At",
            "description": "Comment creation timestamp"
          },
          "author": {
            "$ref": "#/components/schemas/UserResponse",
            "description": "Comment author information"
          }
        },
        "type": "object",
        "required": [
          "comment_id",
          "post_id",
          "user_id",
          "content",
          "created_at",
          "author"
        ],
        "title": "CommentResponse",
        "description": "Comment response model"
      },
      "DefaultCredentialsResponse": {
        "properties": {
          "email": {
            "type": "string",
            "title": "Email",
            "description": "Default email"
          },
          "password": {
            "type": "string",
            "title": "Password",
            "description": "Default password"
          },
          "message": {
            "type": "string",
            "title": "Message",
            "description": "Instructions"
          }
        },
        "type": "object",
        "required": [
          "email",
          "password",
          "message"
        ],
        "title": "DefaultCredentialsResponse",
        "description": "Default credentials response for MVP"
      },
      "HTTPValidationError": {
        "properties": {
          "detail": {
            "items": {
              "$ref": "#/components/schemas/ValidationError"
            },
            "type": "array",
            "title": "Detail"
          }
        },
        "type": "object",
        "title": "HTTPValidationError"
      },
      "LoginRequest": {
        "properties": {
          "email": {
            "type": "string",
            "title": "Email",
            "description": "User email address"
          },
          "password": {
            "type": "string",
            "title": "Password",
            "description": "User password"
          }
        },
        "type": "object",
        "required": [
          "email",
          "password"
        ],
        "title": "LoginRequest",
        "description": "Login request model (MVP - accepts any credentials)"
      },
      "LoginResponse": {
        "properties": {
          "message": {
            "type": "string",
            "title": "Message",
            "description": "Login success message"
          },
          "user": {
            "$ref": "#/components/schemas/UserResponse",
            "description": "User information"
          }
        },
        "type": "object",
        "required": [
          "message",
          "user"
        ],
        "title": "LoginResponse",
        "description": "Login response model"
      },
      "PostImageResponse": {
        "properties": {
          "image_url": {
            "type": "string",
            "title": "Image Url",
            "description": "URL of the image"
          },
          "display_order": {
            "type": "integer",
            "title": "Display Order",
            "description": "Display order of the image"
          }
        },
        "type": "object",
        "required": [
          "image_url",
          "display_order"
        ],
        "title": "PostImageResponse",
        "description": "Response model for an image attached to a post"
      },
      "PostRequest": {
        "properties": {
          "content": {
            "type": "string",
            "maxLength": 2000,
            "minLength": 1,
            "title": "Content",
            "description": "Post content"
          },
          "tags": {
            "anyOf": [
              {
                "items": {
                  "type": "string"
                },
                "type": "array"
              },
              {
                "type": "null"
              }
            ],
            "title": "Tags",
            "description": "Associated tag names",
            "default": []
          }
        },
        "type": "object",
        "required": [
          "content"
        ],
        "title": "PostRequest",
        "description": "Post creation request model"
      },
      "PostResponse": {
        "properties": {
          "post_id": {
            "type": "integer",
            "exclusiveMinimum": 0,
            "title": "Post Id",
            "description": "Unique post identifier"
          },
          "user_id": {
            "type": "integer",
            "exclusiveMinimum": 0,
            "title": "User Id",
            "description": "Post author user identifier"
          },
          "content": {
            "type": "string",
            "maxLength": 2000,
            "minLength": 1,
            "title": "Content",
            "description": "Post content"
          },
          "created_at": {
            "type": "string",
            "title": "Created At",
            "description": "Post creation timestamp"
          },
          "updated_at": {
            "type": "string",
            "title": "Updated At",
            "description": "Post last update timestamp"
          },
          "author": {
            "$ref": "#/components/schemas/UserResponse",
            "description": "Post author information"
          },
          "images": {
            "items": {
              "$ref": "#/components/schemas/PostImageResponse"
            },
            "type": "array",
            "title": "Images",
            "description": "Associated images",
            "default": []
          },
          "tags": {
            "items": {
              "$ref": "#/components/schemas/TagResponse"
            },
            "type": "array",
            "title": "Tags",
            "description": "Associated tags",
            "default": []
          },
          "likes_count": {
            "type": "integer",
            "minimum": 0,
            "title": "Likes Count",
            "description": "Number of likes",
            "default": 0
          },
          "comments_count": {
            "type": "integer",
            "minimum": 0,
            "title": "Comments Count",
            "description": "Number of comments",
            "default": 0
          },
          "bookmarks_count": {
            "type": "integer",
            "minimum": 0,
            "title": "Bookmarks Count",
            "description": "Number of bookmarks",
            "default": 0
          },
          "is_liked": {
            "type": "boolean",
            "title": "Is Liked",
            "description": "Whether current user liked this post",
            "default": false
          },
          "is_bookmarked": {
            "type": "boolean",
            "title": "Is Bookmarked",
            "description": "Whether current user bookmarked this post",
            "default": false
          }
        },
        "type": "object",
        "required": [
          "post_id",
          "user_id",
          "content",
          "created_at",
          "updated_at",
          "author"
        ],
        "title": "PostResponse",
        "description": "Post response model with all related information"
      },
      "SurveyResponse": {
        "properties": {
          "survey_id": {
            "type": "integer",
            "exclusiveMinimum": 0,
            "title": "Survey Id",
            "description": "Unique survey identifier"
          },
          "title": {
            "type": "string",
            "maxLength": 200,
            "minLength": 1,
            "title": "Title",
            "description": "Survey title"
          },
          "question_text": {
            "anyOf": [
              {
                "type": "string",
                "maxLength": 1000
              },
              {
                "type": "null"
              }
            ],
            "title": "Question Text",
            "description": "Survey question text"
          },
          "points": {
            "type": "integer",
            "minimum": 0,
            "title": "Points",
            "description": "Points awarded for participation",
            "default": 0
          },
          "deadline": {
            "type": "string",
            "title": "Deadline",
            "description": "Survey deadline"
          },
          "target_audience": {
            "type": "string",
            "maxLength": 100,
            "title": "Target Audience",
            "description": "Target audience",
            "default": "all"
          },
          "created_at": {
            "type": "string",
            "title": "Created At",
            "description": "Survey creation timestamp"
          },
          "response_count": {
            "type": "integer",
            "minimum": 0,
            "title": "Response Count",
            "description": "Number of responses received",
            "default": 0
          }
        },
        "type": "object",
        "required": [
          "survey_id",
          "title",
          "created_at"
        ],
        "title": "SurveyResponse",
        "description": "Survey response model"
      },
      "TagResponse": {
        "properties": {
          "tag_id": {
            "type": "integer",
            "exclusiveMinimum": 0,
            "title": "Tag Id",
            "description": "Unique tag identifier"
          },
          "tag_name": {
            "type": "string",
            "maxLength": 50,
            "minLength": 1,
            "title": "Tag Name",
            "description": "Tag name"
          },
          "posts_count": {
            "type": "integer",
            "minimum": 0,
            "title": "Posts Count",
            "description": "Number of posts with this tag",
            "default": 0
          }
        },
        "type": "object",
        "required": [
          "tag_id",
          "tag_name"
        ],
        "title": "TagResponse",
        "description": "Tag response model"
      },
      "UserProfileResponse": {
        "properties": {
          "user_id": {
            "type": "integer",
            "exclusiveMinimum": 0,
            "title": "User Id",
            "description": "Unique user identifier"
          },
          "username": {
            "type": "string",
            "maxLength": 50,
            "minLength": 1,
            "title": "Username",
            "description": "Username"
          },
          "display_name": {
            "anyOf": [
              {
                "type": "string",
                "maxLength": 100
              },
              {
                "type": "null"
              }
            ],
            "title": "Display Name",
            "description": "Display name"
          },
          "email": {
            "type": "string",
            "title": "Email",
            "description": "User email address"
          },
          "profile_image_url": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Profile Image Url",
            "description": "Profile image URL"
          },
          "bio": {
            "anyOf": [
              {
                "type": "string",
                "maxLength": 500
              },
              {
                "type": "null"
              }
            ],
            "title": "Bio",
            "description": "User biography"
          },
          "area": {
            "anyOf": [
              {
                "type": "string",
                "maxLength": 100
              },
              {
                "type": "null"
              }
            ],
            "title": "Area",
            "description": "User area/location"
          },
          "created_at": {
            "type": "string",
            "title": "Created At",
            "description": "Account creation timestamp"
          },
          "updated_at": {
            "type": "string",
            "title": "Updated At",
            "description": "Last update timestamp"
          },
          "followers_count": {
            "type": "integer",
            "minimum": 0,
            "title": "Followers Count",
            "description": "Number of followers",
            "default": 0
          },
          "following_count": {
            "type": "integer",
            "minimum": 0,
            "title": "Following Count",
            "description": "Number of users being followed",
            "default": 0
          },
          "posts_count": {
            "type": "integer",
            "minimum": 0,
            "title": "Posts Count",
            "description": "Number of posts created",
            "default": 0
          }
        },
        "type": "object",
        "required": [
          "user_id",
          "username",
          "email",
          "created_at",
          "updated_at"
        ],
        "title": "UserProfileResponse",
        "description": "Extended user profile response with relationship counts"
      },
      "UserResponse": {
        "properties": {
          "user_id": {
            "type": "integer",
            "exclusiveMinimum": 0,
            "title": "User Id",
            "description": "Unique user identifier"
          },
          "username": {
            "type": "string",
            "maxLength": 50,
            "minLength": 1,
            "title": "Username",
            "description": "Username"
          },
          "display_name": {
            "anyOf": [
              {
                "type": "string",
                "maxLength": 100
              },
              {
                "type": "null"
              }
            ],
            "title": "Display Name",
            "description": "Display name"
          },
          "email": {
            "type": "string",
            "title": "Email",
            "description": "User email address"
          },
          "profile_image_url": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Profile Image Url",
            "description": "Profile image URL"
          },
          "bio": {
            "anyOf": [
              {
                "type": "string",
                "maxLength": 500
              },
              {
                "type": "null"
              }
            ],
            "title": "Bio",
            "description": "User biography"
          },
          "area": {
            "anyOf": [
              {
                "type": "string",
                "maxLength": 100
              },
              {
                "type": "null"
              }
            ],
            "title": "Area",
            "description": "User area/location"
          },
          "created_at": {
            "type": "string",
            "title": "Created At",
            "description": "Account creation timestamp"
          },
          "updated_at": {
            "type": "string",
            "title": "Updated At",
            "description": "Last update timestamp"
          }
        },
        "type": "object",
        "required": [
          "user_id",
          "username",
          "email",
          "created_at",
          "updated_at"
        ],
        "title": "UserResponse",
        "description": "User response model with basic user information"
      },
      "ValidationError": {
        "properties": {
          "loc": {
            "items": {
              "anyOf": [
                {
                  "type": "string"
                },
                {
                  "type": "integer"
                }
              ]
            },
            "type": "array",
            "title": "Location"
          },
          "msg": {
            "type": "string",
            "title": "Message"
          },
          "type": {
            "type": "string",
            "title": "Error Type"
          }
        },
        "type": "object",
        "required": [
          "loc",
          "msg",
          "type"
        ],
        "title": "ValidationError"
      }
    }
  }
}